(function () {
  'use strict';

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  var arrayWithoutHoles = _arrayWithoutHoles;

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  var iterableToArray = _iterableToArray;

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var nonIterableSpread = _nonIterableSpread;

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  var toConsumableArray = _toConsumableArray;

  // Adds classes for form
  function addClasses () {
    document.querySelectorAll('[udesly-add-class]').forEach(function (el) {
      var c = el.getAttribute("udesly-add-class");

      if (c && el.parentElement) {
        var _el$parentElement$cla;

        (_el$parentElement$cla = el.parentElement.classList).add.apply(_el$parentElement$cla, toConsumableArray(c.split(" ")));
      }

      el.remove();
    });
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] =
      GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList)
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var asyncToGenerator = _asyncToGenerator;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  function sendSuccessNotification(message) {
    if (!window.notificationSuccessTemplate) {
      return;
    }

    var notification = htmlToElement(window.notificationSuccessTemplate(message));
    appendNotification(notification);
  }

  function appendNotification(notification) {
    notification.style.opacity = '0';
    notification.style.zIndex = '99999999';
    document.body.append(notification);
    setTimeout(function () {
      notification.style.opacity = 1;
    }, 200);
    setTimeout(function () {
      notification.style.opacity = '0';
      setTimeout(function () {
        notification.remove();
      }, 200);
    }, 3000);
  }

  function htmlToElement(html) {
    var template = document.createElement('template');
    html = html.trim(); // Never return a text node of whitespace as the result

    template.innerHTML = html;
    return template.content.firstChild;
  }

  function sendErrorNotification(message) {
    if (!window.notificationErrorTemplate) {
      return;
    }

    var notification = htmlToElement(window.notificationErrorTemplate(message));
    appendNotification(notification);
  }

  function dispatchProductAddedToCart() {
    document.body.dispatchEvent(new CustomEvent('product-added-to-cart'));
  }
  function dispatchProductRemovedFromCart() {
    document.body.dispatchEvent(new CustomEvent('product-removed-from-cart'));
  }
  function dispatchCartShouldBeUpdated() {
    document.body.dispatchEvent(new CustomEvent('cart-should-be-updated'));
  }
  function dispatchCartError(error) {
    document.body.dispatchEvent(new CustomEvent('cart-error', {
      detail: error
    }));
  }
  function onProductAddedToCart(callback) {
    document.body.addEventListener('product-added-to-cart', callback);
  }
  function onCartShouldBeUpdated(callback) {
    document.body.addEventListener('cart-should-be-updated', callback);
  }
  function onProductRemovedFromCart(callback) {
    document.body.addEventListener('product-removed-from-cart', callback);
  }
  function onCartError(callback) {
    document.body.addEventListener('cart-error', callback);
  }
  function init() {
    onProductAddedToCart(function () {
      sendSuccessNotification(window.notificationMessages.add_to_cart);
    });
    onProductRemovedFromCart(function () {
      sendSuccessNotification(window.notificationMessages.remove_from_cart);
    });
    onCartError(function (e) {
      sendErrorNotification(e.detail || "Error");
    });
  }

  function getUdyElements(type) {
    return document.querySelectorAll("[udy-el=\"".concat(type, "\"]"));
  }

  function formatMoney (cents) {
    if (typeof cents == 'string') {
      cents = cents.replace('.', '');
    }

    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = document.documentElement.getAttribute('data-money-format') || "${{amount}}";

    function defaultOption(opt, def) {
      return typeof opt == 'undefined' ? def : opt;
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number / 100.0).toFixed(precision);
      var parts = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents = parts[1] ? decimal + parts[1] : '';
      return dollars + cents;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;

      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;

      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;

      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  }

  function getElementByDataNodeType(type, wrapper) {
    return wrapper.querySelector("[data-node-type=\"".concat(type, "\"]"));
  } // 'data-open-on-hover' to check if it should open on Hover
  // 'data-open-product' to check if it should open on Product added to cart
  // 'data-cart-open' to check if it is open
  // "commerce-cart-wrapper";
  // "commerce-cart-close-link";


  var MiniCart =
  /*#__PURE__*/
  function () {
    function MiniCart(wrapper) {
      classCallCheck(this, MiniCart);

      this.wrapper = wrapper;

      if (this.wrapper) {
        this.init();
      }
    }

    createClass(MiniCart, [{
      key: "init",
      value: function init() {
        var _this = this;

        this.wrapper.addEventListener('wf-change-cart-state', function (e) {
          return _this.handleChangeCartState(e);
        });
        this.openOnProductAdded = this.wrapper.hasAttribute('data-open-product');
        this.openOnHover = this.wrapper.hasAttribute('data-open-on-hover');
        this.updateCartCount();
        this.closeLink = getElementByDataNodeType('commerce-cart-close-link', this.wrapper);
        this.openLink = getElementByDataNodeType('commerce-cart-open-link', this.wrapper);
        this.cartContainer = getElementByDataNodeType('commerce-cart-container', this.wrapper);
        this.cartContainerWrapper = getElementByDataNodeType('commerce-cart-container-wrapper', this.wrapper);
        this.form = getElementByDataNodeType('commerce-cart-form', this.wrapper);

        if (this.closeLink) {
          this.closeLink.addEventListener('click', function () {
            return _this.toggleCart();
          });
          this.closeLink.addEventListener('tap', function () {
            return _this.toggleCart();
          });
        }

        if (this.openLink) {
          this.openLink.removeAttribute('href');

          if (this.openOnHover) {
            this.openLink.addEventListener('mouseenter', function () {
              return _this.openCart();
            });
            this.cartContainer && this.cartContainer.addEventListener('mouseleave', function () {
              return _this.closeCart();
            });
          } else {
            this.openLink.addEventListener('click', function () {
              return _this.toggleCart();
            });
            this.openLink.addEventListener('tap', function () {
              return _this.toggleCart();
            });
          }
        }

        if (this.cartContainerWrapper) {
          this.cartContainerWrapper.addEventListener('click', function (e) {
            if (e.target.contains(_this.cartContainer)) {
              _this.closeCart();
            }
          });
        }

        if (this.openOnProductAdded) {
          onProductAddedToCart(function () {
            return _this.openCart();
          }); // as lambda to not lose this
        }

        onCartShouldBeUpdated(function () {
          return _this.updateCart();
        });
        this.cartContainer.addEventListener('click', function (e) {
          return _this.handleRemove(e);
        });
      }
    }, {
      key: "updateCartCount",
      value: function updateCartCount() {
        document.querySelectorAll('[data-count-hide-rule][udy-el="cart-count"]').forEach(function (cartCount) {
          var count = Number(cartCount.textContent);

          if (cartCount.getAttribute('data-count-hide-rule') === "empty") {
            if (count == 0) {
              cartCount.style.display = "none";
            } else {
              cartCount.style.display = "block";
            }
          }
        });
      }
    }, {
      key: "updateCart",
      value: function () {
        var _updateCart = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee() {
          var res, cart, total;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return fetch('/cart.js', {
                    method: 'get',
                    credentials: 'same-origin'
                  });

                case 2:
                  res = _context.sent;

                  if (!res.ok) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 6;
                  return res.json();

                case 6:
                  cart = _context.sent;

                  if (cart.item_count) {
                    getUdyElements('cart-count').forEach(function (el) {
                      return el.innerHTML = cart.item_count;
                    });
                  } else {
                    getUdyElements('cart-count').forEach(function (el) {
                      return el.innerHTML = 0;
                    });
                  }

                  this.updateCartCount();

                  if (cart.total_price) {
                    total = formatMoney(cart.total_price);
                    getUdyElements('cart-total').forEach(function (el) {
                      return el.innerHTML = total;
                    });
                  }

                  if (cart.items) {
                    this.updateItemsTemplate(cart.items);
                  }

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function updateCart() {
          return _updateCart.apply(this, arguments);
        }

        return updateCart;
      }()
    }, {
      key: "handleRemove",
      value: function () {
        var _handleRemove = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee2(e) {
          var h, url, line, formData, res;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!e.target.matches('[udy-el="remove-item"]')) {
                    _context2.next = 14;
                    break;
                  }

                  e.preventDefault();
                  h = e.target.getAttribute('href');

                  if (!h) {
                    _context2.next = 14;
                    break;
                  }

                  url = new URL(h, "".concat(window.location.protocol, "//").concat(window.location.hostname));
                  line = url.searchParams.get('line');
                  formData = new FormData();
                  formData.append('line', line);
                  formData.append('quantity', 0);
                  _context2.next = 11;
                  return fetch('/cart/change.js', {
                    method: 'post',
                    credentials: 'same-origin',
                    body: formData
                  });

                case 11:
                  res = _context2.sent;

                  if (res.ok) {
                    if (window.location.pathname === "/cart") {
                      window.location.reload();
                    } else {
                      dispatchProductRemovedFromCart();
                    }
                  }

                  dispatchCartShouldBeUpdated();

                case 14:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function handleRemove(_x) {
          return _handleRemove.apply(this, arguments);
        }

        return handleRemove;
      }()
    }, {
      key: "updateItemsTemplate",
      value: function updateItemsTemplate(items) {
        if (!window.udeslyMiniCartTemplate) {
          return;
        }

        this.form.classList.remove('udesly-display-none');
        getUdyElements('no-items-in-cart').forEach(function (el) {
          el.classList.remove('udesly-display-none');
        });
        getUdyElements('cart-actions').forEach(function (el) {
          return el.classList.remove('udesly-display-none');
        });

        if (items.length === 0) {
          this.form.style.display = 'none';
          getUdyElements('no-items-in-cart').forEach(function (el) {
            el.style.display = '';
          });
        } else {
          this.form.style.display = '';
          getUdyElements('no-items-in-cart').forEach(function (el) {
            el.style.display = 'none';
          });
        }

        var newTemplate = '';
        var line = 1;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            item.price = formatMoney(item.price);
            item.total = formatMoney(item.final_line_price);
            item.remove = "/cart/change?line=".concat(line, "&quantity=0");
            newTemplate += window.udeslyMiniCartTemplate(item);
            line++;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        getUdyElements('items-list').forEach(function (list) {
          return list.innerHTML = newTemplate;
        });
      }
    }, {
      key: "toggleCart",
      value: function toggleCart() {
        this.wrapper.dispatchEvent(new CustomEvent('wf-change-cart-state', {
          bubbles: 1
        }));
      }
    }, {
      key: "openCart",
      value: function openCart() {
        this.wrapper.dispatchEvent(new CustomEvent('wf-change-cart-state', {
          bubbles: 1,
          detail: {
            open: true
          }
        }));
      }
    }, {
      key: "closeCart",
      value: function closeCart() {
        this.wrapper.dispatchEvent(new CustomEvent('wf-change-cart-state', {
          bubbles: 1,
          detail: {
            open: false
          }
        }));
      }
    }, {
      key: "handleChangeCartState",
      value: function handleChangeCartState(e) {
        if (e.currentTarget instanceof Element && e instanceof CustomEvent) {
          var t = e.currentTarget,
              n = e.detail,
              r = t.hasAttribute('data-cart-open'),
              o = n && null != n.open ? n.open : !r,
              i = getElementByDataNodeType('commerce-cart-container-wrapper', this.wrapper);

          if (i) {
            var c = getElementByDataNodeType('commerce-cart-container', this.wrapper);

            if (c) {
              var a = i.parentElement;

              if (a) {
                var u = a.getAttribute('data-wf-cart-type'),
                    s = a.getAttribute('data-wf-cart-duration') || 300 + 'ms',
                    d = a.getAttribute('data-wf-cart-easing') || 'ease-out-quad',
                    l = 'opacity ' + s + ' ease 0ms',
                    M = '0ms' !== s,
                    b = void 0,
                    m = void 0;

                switch (u) {
                  case 'modal':
                    b = {
                      scale: 0.95
                    }, m = {
                      scale: 1
                    };
                    break;

                  case 'leftSidebar':
                    b = {
                      x: -30
                    }, m = {
                      x: 0
                    };
                    break;

                  case 'rightSidebar':
                    b = {
                      x: 30
                    }, m = {
                      x: 0
                    };
                    break;

                  case 'leftDropdown':
                  case 'rightDropdown':
                    b = {
                      y: -10
                    }, m = {
                      y: 0
                    };
                }

                o ? (t.setAttribute('data-cart-open', ''), i.style.removeProperty('display'), M && !r && (window.Webflow.tram(i).add(l).set({
                  opacity: 0
                }).start({
                  opacity: 1
                }), window.Webflow.tram(c).add('transform ' + s + ' ' + d + ' 0ms').set(b).start(m))) : (t.removeAttribute('data-cart-open'), M ? (window.Webflow.tram(i).add(l).start({
                  opacity: 0
                }).then(function () {
                  i.style.display = 'none', window.Webflow.tram(c).stop();
                }), window.Webflow.tram(c).add('transform ' + s + ' ' + d + ' 50ms').start(b)) : i.style.display = 'none');
              }
            }
          }
        }
      }
    }]);

    return MiniCart;
  }();

  var LoopAddToCart =
  /*#__PURE__*/
  function () {
    function LoopAddToCart(el) {
      classCallCheck(this, LoopAddToCart);

      this.el = el;
      this.form = el.querySelector('form');

      if (!this.form) {
        return;
      }

      this.init();
    }

    createClass(LoopAddToCart, [{
      key: "init",
      value: function init() {
        var _this = this;

        this.form.addEventListener('submit', function (e) {
          return _this.handleSubmit(e);
        });
        this.quantityInput = this.form.querySelector('input[type="number"]');
        this.id = this.form.querySelector('input[name="id"]').value;
        this.submitButton = this.form.querySelector('input[type="submit"]');
        this.actualValue = this.submitButton.value;
        this.loadingValue = "Adding to Cart...";
      }
    }, {
      key: "handleSubmit",
      value: function () {
        var _handleSubmit = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(e) {
          var formData, res, error;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  e.preventDefault();
                  this.submitButton.value = this.loadingValue;
                  formData = new FormData();
                  formData.append('id', this.id);
                  formData.append('quantity', this.quantityInput ? this.quantityInput.value : 1);
                  _context.next = 7;
                  return fetch('/cart/add.js', {
                    method: 'post',
                    credentials: 'same-origin',
                    body: formData
                  });

                case 7:
                  res = _context.sent;

                  if (!res.ok) {
                    _context.next = 13;
                    break;
                  }

                  dispatchProductAddedToCart();
                  dispatchCartShouldBeUpdated();
                  _context.next = 17;
                  break;

                case 13:
                  _context.next = 15;
                  return res.json();

                case 15:
                  error = _context.sent;
                  dispatchCartError(error.description || 'Error adding to cart');

                case 17:
                  this.submitButton.value = this.actualValue;

                case 18:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handleSubmit(_x) {
          return _handleSubmit.apply(this, arguments);
        }

        return handleSubmit;
      }()
    }]);

    return LoopAddToCart;
  }();

  var Recommended =
  /*#__PURE__*/
  function () {
    function Recommended(list) {
      classCallCheck(this, Recommended);

      this.templateFn = window.recommendedTemplate;

      if (!this.templateFn) {
        return;
      }

      this.listItemsWrapper = list.querySelector('.w-dyn-items');
      this.emptyWrapper = list.querySelector('.w-dyn-empty');
      this.productId = list.getAttribute('data-product-id');
      this.limit = list.getAttribute('data-limit') || 4;
      this.init();
    }

    createClass(Recommended, [{
      key: "init",
      value: function () {
        var _init = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee() {
          var res, data, newTemplate, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return fetch("/recommendations/products.json?product_id=".concat(this.productId, "&limit=").concat(this.limit));

                case 2:
                  res = _context.sent;

                  if (!res.ok) {
                    _context.next = 34;
                    break;
                  }

                  _context.next = 6;
                  return res.json();

                case 6:
                  data = _context.sent;

                  if (!(data.products && data.products.length)) {
                    _context.next = 31;
                    break;
                  }

                  newTemplate = '';
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context.prev = 12;

                  for (_iterator = data.products[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    item = _step.value;
                    item.image = item.images[0] || "";
                    item.price = formatMoney(item.price);
                    newTemplate += this.templateFn(item);
                  }

                  _context.next = 20;
                  break;

                case 16:
                  _context.prev = 16;
                  _context.t0 = _context["catch"](12);
                  _didIteratorError = true;
                  _iteratorError = _context.t0;

                case 20:
                  _context.prev = 20;
                  _context.prev = 21;

                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }

                case 23:
                  _context.prev = 23;

                  if (!_didIteratorError) {
                    _context.next = 26;
                    break;
                  }

                  throw _iteratorError;

                case 26:
                  return _context.finish(23);

                case 27:
                  return _context.finish(20);

                case 28:
                  this.listItemsWrapper.innerHTML = newTemplate;
                  _context.next = 32;
                  break;

                case 31:
                  this.emptyWrapper.style.display = "";

                case 32:
                  _context.next = 35;
                  break;

                case 34:
                  this.emptyWrapper.style.display = "";

                case 35:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[12, 16, 20, 28], [21,, 23, 27]]);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }]);

    return Recommended;
  }();

  var ProductImages =
  /*#__PURE__*/
  function () {
    function ProductImages() {
      var _this = this;

      classCallCheck(this, ProductImages);

      this.images = document.querySelectorAll('[data-product-image-id]:not(.w-slide)');
      this.images.forEach(function (el) {
        el.addEventListener('click', function (e) {
          return _this.handleImageClick(e);
        });
      });
      document.querySelectorAll('[data-product-image-id="1"]:not(.w-slide)').forEach(function (el) {
        return el.classList.add('current');
      });
      this.sliders = [];
      this.featuredImages = [];
      document.querySelectorAll('.w-slide[data-slider-image-id="1"]').forEach(function (el) {
        return _this.sliders.push(el.closest('.w-slider'));
      });
      document.querySelectorAll('[udy-el="product-featured-image"]').forEach(function (el) {
        if (!el.closest('.w-dyn-item')) {
          _this.featuredImages.push(el);
        }
      });
    }

    createClass(ProductImages, [{
      key: "handleImageClick",
      value: function handleImageClick(e) {
        var currentImage = e.target;
        var imageIndex = currentImage.getAttribute('data-product-image-id');
        this.images.forEach(function (el) {
          return el.classList.remove('current');
        });
        currentImage.classList.add('current');
        var imgSrc = currentImage.src || window.getComputedStyle(currentImage)["backgroundImage"].slice(4, -1).replace(/"/g, "");
        this.sliders.forEach(function (slider) {
          slider.querySelectorAll('.w-slider-dot')[imageIndex - 1].dispatchEvent(new Event('click', {
            bubbles: true
          }));
        });
        this.featuredImages.forEach(function (image) {
          if (image.nodeName == "IMG") {
            image.setAttribute('src', imgSrc);
          } else {
            image.style.backgroundImage = "url(".concat(imgSrc, ")");
          }
        });
      }
    }]);

    return ProductImages;
  }();

  var LoopAddToCartVariations =
  /*#__PURE__*/
  function () {
    function LoopAddToCartVariations(el) {
      classCallCheck(this, LoopAddToCartVariations);

      this.form = el.querySelector('form');

      if (!this.form) {
        return;
      }

      this.init();
    }

    createClass(LoopAddToCartVariations, [{
      key: "init",
      value: function init() {
        var _this = this;

        this.form.addEventListener('submit', function (e) {
          return _this.handleSubmit(e);
        });
        this.quantityInput = this.form.querySelector('input[type="number"]');
        this.submitButton = this.form.querySelector('input[type="submit"]');
        this.actualValue = this.submitButton.value;
        this.loadingValue = "Adding to Cart...";
      }
    }, {
      key: "handleSubmit",
      value: function () {
        var _handleSubmit = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(e) {
          var formData, res, error;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  e.preventDefault();
                  this.submitButton.value = this.loadingValue;
                  formData = new FormData(this.form);
                  _context.next = 5;
                  return fetch('/cart/add.js', {
                    method: 'post',
                    credentials: 'same-origin',
                    body: formData
                  });

                case 5:
                  res = _context.sent;

                  if (!res.ok) {
                    _context.next = 11;
                    break;
                  }

                  dispatchProductAddedToCart();
                  dispatchCartShouldBeUpdated();
                  _context.next = 15;
                  break;

                case 11:
                  _context.next = 13;
                  return res.json();

                case 13:
                  error = _context.sent;
                  dispatchCartError(error.description || 'Error adding to cart');

                case 15:
                  this.submitButton.value = this.actualValue;

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handleSubmit(_x) {
          return _handleSubmit.apply(this, arguments);
        }

        return handleSubmit;
      }()
    }]);

    return LoopAddToCartVariations;
  }();

  var SingleAddToCartSelect =
  /*#__PURE__*/
  function () {
    function SingleAddToCartSelect(el) {
      classCallCheck(this, SingleAddToCartSelect);

      this.el = el;
      this.initDropdowns();
    }

    createClass(SingleAddToCartSelect, [{
      key: "initDropdowns",
      value: function initDropdowns() {
        this.el.querySelectorAll('.w-dropdown[data-option]').forEach(function (dropdown) {
          dropdown.querySelectorAll('a[data-option-index]').forEach(function (dropdownLink) {
            dropdownLink.addEventListener('click', function (e) {
              e.preventDefault();
              var target = e.target;
              var optionName = target.closest('.w-dropdown').dataset['option'];
              var index = target.dataset['optionIndex'];
              var form = target.closest('form');
              var select = form.querySelector("select[data-option=\"".concat(optionName, "\"]"));
              var valueName = target.textContent;
              form.querySelectorAll("[data-option-value=\"".concat(optionName, "\"]")).forEach(function (l) {
                return l.textContent = valueName || "";
              });

              if (!select) {
                console.error('Invalid select option name');
              } else {
                select.selectedIndex = index;
                select.dispatchEvent(new Event('change', {
                  bubbles: true
                }));
              }

              target.closest('.w-dropdown').querySelectorAll('.w--open').forEach(function (a) {
                return a.classList.remove('w--open');
              });
            });
          });
        });
      }
    }]);

    return SingleAddToCartSelect;
  }();

  var DirectAddToCart =
  /*#__PURE__*/
  function () {
    function DirectAddToCart(el) {
      classCallCheck(this, DirectAddToCart);

      this.el = el;
      this.init();
    }

    createClass(DirectAddToCart, [{
      key: "init",
      value: function init() {
        var _this = this;

        this.el.addEventListener('click', function (e) {
          return _this.handleSubmit(e);
        });
        this.id = this.el.dataset['productId'];
        this.value = this.el.textContent;
        this.loadingValue = this.el.getAttribute('loading-text') || this.value;
      }
    }, {
      key: "handleSubmit",
      value: function () {
        var _handleSubmit = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(e) {
          var formData, res, error;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  e.preventDefault();
                  this.el.classList.add('loading');
                  this.el.textContent = this.loadingValue;
                  formData = new FormData();
                  formData.append('id', this.id);
                  formData.append('quantity', 1);
                  _context.next = 8;
                  return fetch('/cart/add.js', {
                    method: 'post',
                    credentials: 'same-origin',
                    body: formData
                  });

                case 8:
                  res = _context.sent;

                  if (!res.ok) {
                    _context.next = 14;
                    break;
                  }

                  dispatchProductAddedToCart();
                  dispatchCartShouldBeUpdated();
                  _context.next = 18;
                  break;

                case 14:
                  _context.next = 16;
                  return res.json();

                case 16:
                  error = _context.sent;
                  dispatchCartError(error.description || 'Error adding to cart');

                case 18:
                  this.el.classList.remove('loading');
                  this.el.textContent = this.value;

                case 20:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handleSubmit(_x) {
          return _handleSubmit.apply(this, arguments);
        }

        return handleSubmit;
      }()
    }]);

    return DirectAddToCart;
  }();

  function getElementsByDataNodeType(type) {
    return document.querySelectorAll("[data-node-type=\"".concat(type, "\"]"));
  }

  document.addEventListener('DOMContentLoaded', function (event) {
    addClasses();
    getElementsByDataNodeType('commerce-cart-wrapper').forEach(function (wrapper) {
      new MiniCart(wrapper);
    });
    getUdyElements('loop-add-to-cart').forEach(function (el) {
      new LoopAddToCart(el);
    });
    getUdyElements('direct-add-to-cart').forEach(function (el) {
      new DirectAddToCart(el);
    });
    getUdyElements('loop-add-to-cart-variations').forEach(function (el) {
      new LoopAddToCartVariations(el);
    });
    init();
    getUdyElements('recommended-products').forEach(function (el) {
      new Recommended(el);
    });
    getUdyElements('single-add-to-cart-select').forEach(function (el) {
      new SingleAddToCartSelect(el);
    });
    getUdyElements('loop-add-to-cart-variation-selects').forEach(function (el) {
      new LoopAddToCartVariations(el);
      new SingleAddToCartSelect(el);
    });
    new ProductImages();
  }, false);

}());
